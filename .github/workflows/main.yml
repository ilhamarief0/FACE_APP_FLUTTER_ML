name: "Build"

on:
  workflow_dispatch:
  pull_request:
    branches: [dev, test, main]
  push:
    branches: [dev, test, main]

jobs:
  build:
    name: Build & Release
    runs-on: ubuntu-latest

    steps:
      # 1. Checkout Repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # 2. Setup Java
      - name: Set Up Java
        uses: actions/setup-java@v3.12.0
        with:
          distribution: 'oracle'
          java-version: '17'

      # 3. Setup Flutter
      - name: Set Up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.29.0'
          channel: 'stable'

      # 4. Install Dependencies
      - name: Install Dependencies
        run: flutter pub get

      # 5. PATCH qr_code_scanner: tambahkan namespace agar build tidak error
      - name: Patch namespace in qr_code_scanner
        run: |
          FILE="$HOME/.pub-cache/hosted/pub.dev/qr_code_scanner-1.0.1/android/build.gradle"
          if grep -q "namespace" "$FILE"; then
            echo "Namespace already exists"
          else
            echo "Patching namespace into qr_code_scanner..."
            sed -i '0,/android {/s//android {\n    namespace "com.example.qr_code_scanner"/' "$FILE"
            echo "Namespace patched!"
          fi

      # 6. Create .env file
      - name: Create .env file
        run: |
          echo "API_URL=${{ secrets.API_URL }}" > .env
          cat .env

      # 7. Build APK (Release)
      - name: Build APK (Release)
        run: |
          flutter build apk --release
          if [ ! -f build/app/outputs/flutter-apk/app-release.apk ]; then
            echo "APK not found! Build failed."
            exit 1
          fi

      # 8. Upload Artifacts
      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Releases
          path: build/app/outputs/flutter-apk/app-release.apk

      # 9. Extract version from pubspec.yaml
      - name: Extract version from pubspec.yaml
        id: extract_version
        run: |
          version=$(grep '^version: ' pubspec.yaml | cut -d ' ' -f 2 | tr -d '\r')
          echo "VERSION=$version" >> $GITHUB_ENV

      # 10. Check if Tag Exists
      - name: Check if Tag Exists
        id: check_tag
        run: |
          if git rev-parse "v${{ env.VERSION }}" >/dev/null 2>&1; then
            echo "TAG_EXISTS=true" >> $GITHUB_ENV
          else
            echo "TAG_EXISTS=false" >> $GITHUB_ENV

      # 11. Modify Tag if it Exists
      - name: Modify Tag
        if: env.TAG_EXISTS == 'true'
        id: modify_tag
        run: |
          new_version="${{ env.VERSION }}-build-${{ github.run_number }}"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      # 12. Create Release
      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          artifacts: build/app/outputs/flutter-apk/app-release.apk
          tag: v${{ env.VERSION }}
          token: ${{ secrets.TOKEN }}
